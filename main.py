import asyncio
import subprocess
import logging
import os
from aiogram import Bot, Dispatcher
from aiogram.types import Message

from aiogram.filters import Command
from aiogram import F

API_TOKEN = os.getenv('TOKEN')
CHAT_ID = os.getenv('CHAT_ID')

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

alert_cooldown = False


async def run_pidstat():
    global alert_cooldown

    while True:
        try:
            result = subprocess.run(["pidstat", "-u", "-p", "ALL", "1", "1"], capture_output=True, text=True)
            output = result.stdout.strip()

            for line in output.splitlines():
                if "python3" in line:
                    parts = line.split()
                    if len(parts) >= 8:
                        cpu_usage = float(parts[7].replace(",", "."))
                        cmd = parts[-1]

                        logging.info(f"–ü—Ä–æ—Ü–µ—Å—Å: {cmd}, CPU: {cpu_usage}%")

                        if cpu_usage >= 99 and not alert_cooldown:
                            msg = (
                                f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n"
                                f"–ü—Ä–æ—Ü–µ—Å—Å: {cmd}, CPU: {cpu_usage}%\n\n"
                                f"–í–µ—Ä–æ—è—Ç–Ω–æ, —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–∏—Å ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞!"
                            )
                            await bot.send_message(int(CHAT_ID), msg)

                            # –≤–∫–ª—é—á–∞–µ–º –∫—É–ª–¥–∞—É–Ω –Ω–∞ 60 —Å–µ–∫—É–Ω–¥
                            alert_cooldown = True
                            asyncio.create_task(reset_cooldown())
                    break
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞: {e}")

        await asyncio.sleep(1)


async def reset_cooldown():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫—É–ª–¥–∞—É–Ω —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥"""
    global alert_cooldown
    await asyncio.sleep(60)
    alert_cooldown = False


def get_pidstat_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç CPU info –ø–æ python3, watchman-task, redis-server"""
    result = subprocess.run(["pidstat", "-u", "-p", "ALL", "1", "1"], capture_output=True, text=True)
    output = result.stdout.strip()

    processes = ["python3", "watchman-task", "redis-server"]
    report = []

    for proc in processes:
        for line in output.splitlines():
            if proc in line:
                parts = line.split()
                if len(parts) >= 8:
                    cpu_usage = parts[7]
                    report.append(f"{proc}: {cpu_usage}%")
                break
        else:
            report.append(f"{proc}: –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return "\n".join(report)


@dp.message(Command("info"))
async def cmd_info(message: Message):
    info = get_pidstat_info()
    await message.answer(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:\n{info}")


@dp.message()
async def echo(message: Message):
    await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–¥—ë—Ç –≤ —Ñ–æ–Ω–µ.")


async def main():
    asyncio.create_task(run_pidstat())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
